#root {
  height: 100%;
  overflow: hidden;
}

.App {
  --grid-size: 15;
  --cell-size: 36;
  --board-image: url(./assets/images/board-15.png);

  --app-text-color: hsl(0, 0%, 95%);
  --app-background-color: hsl(200, 30%, 50%);
  --app-background: linear-gradient(
    to right bottom,
    hsl(200, 30%, 50%),
    hsl(200, 30%, 40%)
  );
  --board-background-color: aliceblue;
  --board-shadow: 0 0 10px 0px rgb(0 0 0 / 50%);
  --opacity-hover-background-color: hsla(0, 0%, 0%, 0.1);
  --island-fill: hsl(50, 70%, 70%);
  --island-stroke-v: hsl(100, 50%, 50%);
  --island-stroke-x: hsl(0, 50%, 50%);
  --bridge-color: hsl(25deg 70% 30%);

  height: 100%;
  font-size: 1.1rem;
  user-select: none;

  color: var(--app-text-color);
  background-color: var(--app-background-color);
  background: var(--app-background);
  outline: none;
}
.App.hard-mode {
  --grid-size: 13;
  --cell-size: 41.5;
  --board-image: url(./assets/images/board-13.png);
}
.App.dark-mode {
  --app-text-color: hsl(0, 0%, 85%);
  --app-background-color: hsl(200, 30%, 15%);
  --app-background: linear-gradient(
    to right bottom,
    hsl(200, 30%, 15%),
    hsl(200, 30%, 5%)
  );
  --board-background-color: hsl(200 100% 3%);
  --board-shadow: 0 0 10px 0px rgb(200 200 200 / 50%);
  --opacity-hover-background-color: hsla(0, 0%, 100%, 0.1);
  --island-fill: hsl(50, 50%, 50%);
  --island-stroke-v: hsl(100, 50%, 40%);
  --island-stroke-x: hsl(0, 50%, 40%);
  --bridge-color: hsl(25deg 50% 25%);
}
.App.time-effect-dark {
  filter: brightness(0.2);
  transition: filter 5s linear;
}
.App.time-effect-dark .board-wrapper {
  animation: shake 800ms linear 1.5s, shake 700ms linear 2.3s,
    shake 600ms linear 3s, shake 500ms linear 3.6s, shake 400ms linear 4.1s,
    shake 300ms linear 4.5s, shake 200ms linear 4.8s,
    shake 100ms infinite linear 5s;
}
.App.time-effect-flash {
  filter: brightness(1);
  transform: scale(2) rotate(3deg);
  opacity: 0;
  transition: filter 300ms, opacity 300ms, transform 300ms;
}
.App.time-effect-end {
  opacity: 1;
  transition: opacity 5s;
}

.wrapper {
  justify-content: center;
  gap: 5rem;
  padding: 2rem 12rem;
}

.page-title {
  font-size: 11rem;
  font-weight: 400;
  font-family: "Karantina";
  letter-spacing: 10px;
  line-height: 1;
  margin-block: 0.75rem;
  text-shadow: 5px 5px 10px hsla(0, 0%, 0%, 0.6);
  --animation-delay: 3000ms;
}
.page-title::first-letter {
  letter-spacing: 0px;
}
.page-title > :nth-last-child(2).hide {
  animation: fade-out var(--animation-delay) forwards;
}
.page-title > :last-child {
  font-size: 0.6em;
  position: relative;
  bottom: 16px;
  left: 65px;
  display: none;
  animation: fade-in var(--animation-delay) forwards;
}

.page-title > :last-child.visible {
  display: inline;
}

.date {
  font-size: 2.5rem;
  position: fixed;
  top: 1rem;
  left: 2rem;
  transform: rotate(-15deg);
  line-height: 1;
  margin-block: 1.5rem;
}

.how-to {
  --section-min-width: 28rem;
  /* width: 35rem; */
  min-width: var(--section-min-width);
}
.how-to li {
  line-height: 1.5;
}
.how-to .icon {
  width: 1.5rem;
  padding-left: 0.5rem;
}

.help {
  gap: 0.5rem;
  margin-top: 1.2rem;
}
.help p {
  margin: 0;
  line-height: 24px;
}

.done-wrapper {
  /* width: var(--section-min-width); */
  text-align: center;
}
.done-button {
  font-size: 2.5rem;
  margin-top: 3.8rem;
  border-radius: 2rem;
  box-shadow: 0 0 5px 0px hsla(0, 0%, 100%, 0.5);
  border: 1px solid white;
  background-color: transparent;
  position: relative;
}
.done-button::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border-radius: 2rem;
  background: linear-gradient(
    to bottom,
    hsla(0, 0%, 100%, 0.5),
    hsla(0, 0%, 100%, 0.1)
  );
}
.done-button:hover::before {
  background: linear-gradient(
    to bottom,
    hsla(0, 0%, 100%, 0.55),
    hsla(0, 0%, 100%, 0.15)
  );
}

.board-wrapper {
  padding: 1rem;
  border-radius: 1rem;
  background-color: var(--board-background-color);
  box-shadow: var(--board-shadow);
  transition: transform 1s;
}
.board-wrapper.flipped {
  transform: scaleX(-1) rotate(0deg);
}
.board-wrapper.rotate {
  transform: rotate(-360deg);
  transition: transform 0s;
}
.board-wrapper.rotate.flipped {
  transform: scaleX(-1) rotate(360deg);
  transition: transform 0s;
}

.board {
  width: calc(var(--grid-size) * var(--cell-size) * 1px);
  height: calc(var(--grid-size) * var(--cell-size) * 1px);
  position: relative;
  background-color: inherit;
}
.board::before {
  content: "";
  position: absolute;
  width: calc(100% / var(--grid-size) * (var(--grid-size) - 1));
  height: calc(100% / var(--grid-size) * (var(--grid-size) - 1));
  top: calc(100% / var(--grid-size) / 2);
  left: calc(100% / var(--grid-size) / 2);
  background-image: var(--board-image);
  background-size: cover;
  background-position: center;
  pointer-events: none;
}

.island {
  z-index: 2;
  position: absolute;
  width: calc(100% / var(--grid-size));
  height: calc(100% / var(--grid-size));
}
.island:hover,
.island:active {
  filter: brightness(0.9);
}
.island circle {
  fill: var(--island-fill);
}
.island.v circle {
  stroke: var(--island-stroke-v);
}
.island.x circle {
  stroke: var(--island-stroke-x);
}

.bridge {
  position: absolute;
  background-color: inherit;
  border-width: 0;
  border-style: solid;
  border-color: var(--bridge-color);
}

.board-top {
  padding-inline: 0 0.5rem;
  margin-bottom: 0.5rem;
  justify-content: space-between;
  align-items: center;
}
.icon-button {
  display: flex;
  cursor: pointer;
  border-radius: 50%;
}
.icon-button svg {
  width: 2rem;
  padding: 0.3rem;
}
.timer {
  font-size: 1.5rem;
}

.example-modal {
  display: flex;
  flex-direction: column;
  align-items: center;

  color: var(--app-text-color);
  background-color: var(--app-background-color);
  background: var(--app-background);
  margin: auto;
  padding: 2rem;
  border-radius: 1rem;
}
.example-img-panel {
  align-items: center;
  gap: 1rem;
}
.example-img {
  width: 15rem;
  border-radius: 1rem;
  /* TODO dark mode */
}
.example-nav {
  width: 3rem;
  padding: 0.1rem;
  border-radius: 2rem;
}
.next {
  transform: scaleX(-1);
}
.example-modal p {
  margin-top: 1.5rem;
  margin-bottom: 0;
  text-align: center;
  width: 30rem;
  height: 4.5rem;
}

.pause {
  position: fixed;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
  z-index: 4;
  backdrop-filter: blur(7px) brightness(0.75);
  display: none;
  justify-content: center;
  align-items: center;
}
.pause.visible {
  display: flex;
}
.pause svg {
  width: 20rem;
}

.credits {
  --roll-time: 8s;
  position: fixed;
  inset: 0;
  z-index: 6;
  background-color: black;
  display: none;
  animation: fade-in-80 500ms forwards,
    fade-out-80 500ms forwards var(--roll-time);
}
.credits.display {
  display: block;
}
.credits::after {
  content: "";
  position: absolute;
  inset: 0;
  right: -150px;
  left: -150px;
  box-shadow: inset 0 0 100px 50px #131d23;
}
.credits p {
  margin: 0 auto;
  text-align: center;
  white-space: pre-line;
  line-height: 1.5;
  font-size: 2rem;
  transform: translateY(100%);
  animation: roller var(--roll-time) linear;
}

.settings {
  --width: 3.5rem;
  position: fixed;
  top: 1rem;
  right: 1rem;
  padding: 0.5rem;
  width: var(--width);

  border-radius: 100vw;
  transition: background-color 1500ms;

  /* because somehow i get height more than needed */
  display: grid;
}
.settings:hover {
  background-color: var(--opacity-hover-background-color);
  transition: background-color 100ms;
}
.settings:hover .settings-list {
  height: 7rem;
}
.settings:hover svg {
  transform: rotate(60deg);
}
.settings svg {
  cursor: pointer;
  box-sizing: border-box;
  padding: 0.1rem;
  width: var(--width);
  transition: transform 300ms;
}
.settings-list {
  height: 0;
  transition: height 300ms;
  overflow: hidden;
  align-items: center;
  font-size: 0.8rem;
  box-sizing: border-box;
}
.settings-list > :first-child {
  margin-top: 0.5rem;
}
.settings-list p {
  margin-block: 0 0.3rem;
}
.settings-list .toggle {
  margin-bottom: 0.6rem;
  --toggle-width: 2.5rem;
  --toggle-bg-color: var(--app-text-color);
  --toggle-fg-color: var(--app-background-color);
  --toggle-check-color: hsl(160, 55%, 50%);
}

.ad {
  position: absolute;
  right: 0;
  bottom: 0;
  text-align: center;
  transform: rotate(-15deg) translate(-5%, 90%);
  --font-size: 3.5rem;
  --img-size: 25rem;
  /* img need to be square */
}
.ad > img {
  width: var(--img-size);
  cursor: pointer;
  transition: transform 300ms;
  border-radius: 20px;
}
.ad > img:hover {
  transform: translateY(-20%);
}
.ad > h1 {
  z-index: -1;
  position: absolute;
  inset: 0 0 auto 0;
  margin: 0;
  font-family: Chakra Petch;
  font-size: var(--font-size);
  color: transparent;
  -webkit-text-stroke: 1px var(--app-text-color);
  transition: top 300ms;
  direction: ltr;
}
.ad > img:hover + h1 {
  top: calc(-1.5 * var(--font-size) - 0.2 * var(--img-size));
}

/* .eggs {
	position: fixed;
	top: 0;
	right: 0;
	width: 20px;
	margin: 1px;
	aspect-ratio: 1;
}
.eggs:hover::after {
	content: "חפשו את ה easter eggs!";
	position: absolute;
	top: 0;
	right: 0;
	padding: 5px 10px;
	white-space: nowrap;
	pointer-events: none;
} */

@keyframes shake {
  0% {
    transform: rotate(0deg);
  }

  25% {
    transform: rotate(1deg);
  }

  50% {
    transform: rotate(0deg);
  }

  75% {
    transform: rotate(-1deg);
  }

  100% {
    transform: rotate(0deg);
  }
}

@keyframes roller {
  0% {
    transform: translateY(100vh);
  }

  100% {
    transform: translateY(-100%);
  }
}

@keyframes fade-in {
  0% {
    opacity: 0;
  }

  100% {
    opacity: 1;
  }
}

@keyframes fade-out {
  0% {
    opacity: 1;
  }

  100% {
    opacity: 0;
  }
}

@keyframes fade-in-80 {
  0% {
    opacity: 0;
  }

  100% {
    opacity: 0.8;
  }
}

@keyframes fade-out-80 {
  0% {
    opacity: 0.8;
  }

  100% {
    opacity: 0;
  }
}

/* example board */

/* .App {
  --grid-size: 6;
  --cell-size: 100;
  --board-image: url(./assets/images/board-example.png);
  --dropshadow: drop-shadow(0px 0px 10px black);
}
.App.dark-mode {
  --dropshadow: drop-shadow(0px 0px 10px white);
}

.board-wrapper {
  border-radius: unset;
  box-shadow: unset;
  padding: 2rem;
} */

/* 
boardStore:
  islands: initIslandsFromData(levelsExample["example-1"]) (export util)
  gridSize: 6,
  cellSize: 100,
Settings:
  // setSize(isHardMode ? 13 : 15);
  // setIslands(getTodayLevel(isHardMode));
Bridge:
  const borderWidth = "13px";

.island {
  filter: var(--dropshadow);
}
*/